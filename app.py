import streamlit as st
import importlib.util
import sys
from pathlib import Path
from typing import Optional
import time
import hashlib
from agents.prompts import article_writer_prompt

# --- Import article_writer functions dynamically ---
article_writer_path = Path("agents/article_writer.py").resolve()
spec = importlib.util.spec_from_file_location("article_writer", article_writer_path)
article_writer = importlib.util.module_from_spec(spec)
sys.modules["article_writer"] = article_writer
spec.loader.exec_module(article_writer)

# --- UI Constants ---
APP_TITLE = "Brand Voice AI Agent ‚Äì Content Generation Platform"
STYLE_PATH = Path("agents/writing_styles/writing_style_20250527_165709.md")

# --- Load precomputed writing style ---
with open(STYLE_PATH, "r") as f:
    writing_style_md = f.read()

# --- Streamlit page config ---
st.set_page_config(page_title=APP_TITLE, layout="wide")
st.title(APP_TITLE)

# --- Load article summaries ---
@st.cache_resource(show_spinner=False)
def get_article_summaries():
    return article_writer.load_article_summaries()

article_summaries = get_article_summaries()
article_urls = list(article_summaries.keys())

# --- Load precomputed blog posts ---
def get_latest_blog_posts():
    import glob
    files = glob.glob("agents/written_blog_posts/precomputed_blog_posts_*.json")
    if not files:
        return {}
    latest = max(files)
    import json
    with open(latest, "r") as f:
        return json.load(f)

@st.cache_resource(show_spinner=False)
def load_precomputed_blog_posts():
    return get_latest_blog_posts()

precomputed_blog_posts = load_precomputed_blog_posts()

# --- Session state for selected article and generated post ---
if "selected_article" not in st.session_state:
    st.session_state.selected_article = None
if "generated_post" not in st.session_state:
    st.session_state.generated_post = None
if "feedback_submitted" not in st.session_state:
    st.session_state.feedback_submitted = False

# --- Article selection UI ---
st.subheader("1. Select an Article")
for url in article_urls:
    meta = article_summaries[url]["metadata"] if "metadata" in article_summaries[url] else {}
    title = meta.get("title", url)
    cols = st.columns([6, 1])
    with cols[0]:
        if st.button(title, key=f"select_{url}"):
            st.session_state.selected_article = url
            st.session_state.generated_post = None
            st.session_state.feedback_submitted = False
    with cols[1]:
        st.markdown(f"[üîó](<{url}>){' '}", unsafe_allow_html=True)

# --- Article summary and generation UI ---
selected_url: Optional[str] = st.session_state.selected_article
if selected_url:
    st.markdown(f"**Article:** [{selected_url}]({selected_url})")
    summary = article_summaries[selected_url]["summary"] if "summary" in article_summaries[selected_url] else "No summary available."
    # Simulate AI summary computation
    if "summary_shown" not in st.session_state or st.session_state.selected_article != st.session_state.get("last_summary_article"):
        st.session_state.summary_shown = False
    if not st.session_state.summary_shown:
        if st.button("Summarize Article", key="summarize_article"):
            with st.spinner("AI is summarizing the article..."):
                time.sleep(3)
                st.session_state.summary_shown = True
                st.session_state.last_summary_article = selected_url
    if st.session_state.summary_shown:
        st.success(
            """
            **AI-Generated Summary**
            
            Here's a custom summary of the article, generated by an AI agent.
            """,
            icon="ü§ñ"
        )
        st.markdown(summary)

    st.markdown("---")
    st.subheader("2. Generate AI-Written Post")

    # --- Writing style editing and hash logic ---
    # Dynamically import article_writer to get load_latest_writing_style
    article_writer_path = Path("agents/article_writer.py").resolve()
    spec = importlib.util.spec_from_file_location("article_writer", article_writer_path)
    article_writer = importlib.util.module_from_spec(spec)
    sys.modules["article_writer"] = article_writer
    spec.loader.exec_module(article_writer)
    latest_writing_style = article_writer.load_latest_writing_style()
    if "writing_style_text" not in st.session_state or st.session_state.selected_article != st.session_state.get("last_writing_style_article"):
        st.session_state.writing_style_text = latest_writing_style
        st.session_state.last_writing_style_article = selected_url
        st.session_state.writing_style_hash = hashlib.sha256(latest_writing_style.encode("utf-8")).hexdigest()
    writing_style_text = st.session_state.writing_style_text
    with st.expander("See the AI's writing style", expanded=False):
        new_writing_style_text = st.text_area(
            "Edit the AI's writing style below:",
            value=writing_style_text,
            key="writing_style_text_area",
            height=300
        )
    # Reset generated_post if writing style changed
    if new_writing_style_text != st.session_state.writing_style_text:
        st.session_state.generated_post = None
        st.session_state.writing_style_text = new_writing_style_text
    current_writing_style_hash = hashlib.sha256(st.session_state.writing_style_text.encode("utf-8")).hexdigest()

    if st.session_state.generated_post is None:
        if st.button("Write AI-Generated Post", key="write_post"):
            with st.spinner("AI is writing your blog post..."):
                if current_writing_style_hash == st.session_state.writing_style_hash:
                    time.sleep(3)
                    # Use precomputed blog post
                    if selected_url in precomputed_blog_posts:
                        st.session_state.generated_post = precomputed_blog_posts[selected_url]["generated_text"]
                        print("[DEBUG] Used precomputed blog post.")
                    else:
                        st.error("No precomputed blog post found for this article.")
                        print("[DEBUG] No precomputed blog post found.")
                else:
                    print("[DEBUG] Using custom writing style for blog post.")
                    # Use custom writing style with default prompt
                    st.session_state.generated_post = article_writer.write_blog_post_with_custom_writing_style(
                        selected_url, st.session_state.writing_style_text
                    )
                    print("[DEBUG] Used custom writing style for blog post.")
    if st.session_state.generated_post:
        st.info(
            """
            **AI-Generated Blog Post**
            
            Below is a custom blog post, written by the AI agent in your brand's unique style, about the selected article.
            """,
            icon="‚úçÔ∏è"
        )
        st.markdown(st.session_state.generated_post)

        st.markdown("---")
        st.subheader("3. Feedback")
        col1, col2 = st.columns([1, 8])
        with col1:
            feedback = st.radio("Was this post helpful?", ("üëç", "üëé"), key="feedback_thumb")
        with col2:
            feedback_text = st.text_area("Additional feedback (optional):", key="feedback_text")
        if st.button("Submit Feedback", key="submit_feedback") and not st.session_state.feedback_submitted:
            # Save feedback to data/tmp/{session_timestamp}/
            import os, json, time as time_mod
            ts = int(time_mod.time())
            feedback_dir = Path(f"data/tmp/{ts}")
            feedback_dir.mkdir(parents=True, exist_ok=True)
            feedback_data = {
                "article_url": selected_url,
                "feedback": feedback,
                "feedback_text": feedback_text,
                "generated_post": st.session_state.generated_post,
            }
            with open(feedback_dir / "feedback.json", "w") as f:
                json.dump(feedback_data, f, indent=2)
            st.session_state.feedback_submitted = True
            st.success("Thank you for your feedback!")
        elif st.session_state.feedback_submitted:
            st.info("Feedback already submitted. Thank you!")

# --- Show writing style guide for reference ---
st.markdown("---")
with st.expander("AI-Generated Brand Writing Style Guide", expanded=False):
    st.caption("Brand style guide generated by AI after reading all your available online written content.")
    st.markdown(writing_style_md)

# --- Footer / Style Notes ---
st.markdown("""
<style>
    .stApp { background-color: #f8fafc; }
    .css-18e3th9 { padding-top: 2rem; }
</style>
""", unsafe_allow_html=True)

